// This file is automatically generated by Teams Toolkit.
// The teamsfx tasks defined in this file require Teams Toolkit version >= 4.1.0.
// See https://aka.ms/teamsfx-debug-tasks for details on how to customize each task and how to integrate with existing Teams Toolkit projects.
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start Teams App Locally",
            "dependsOn": [
                "Validate prerequisites",
                "Start local tunnel",
                "Create resources",
                "Install tools and Build project",
                "Start services"
            ],
            "dependsOrder": "sequence"
        },
        {
            // Check all required prerequisites.
            // See https://aka.ms/teamsfx-check-prerequisites-task to know the details and how to customize the args.
            "label": "Validate prerequisites",
            "type": "teamsfx",
            "command": "debug-check-prerequisites",
            "args": {
                "prerequisites": [
                    "nodejs", // Validate if Node.js is installed.
                    "portOccupancy" // Validate available ports to ensure those debug ones are not occupied.
                ],
                "portOccupancy": [
                    3978, // bot service port
                    9239 // bot inspector port for Node.js debugger
                ]
            }
        },
        {
            // Start the local tunnel service to forward public ngrok URL to local port and inspect traffic.
            // See https://aka.ms/teamsfx-local-tunnel-task for the detailed args definitions,
            // as well as samples to:
            //   - use your own ngrok command / configuration / binary
            //   - use your own tunnel solution
            //   - provide alternatives if ngrok does not work on your dev machine
            "label": "Start local tunnel",
            "type": "teamsfx",
            "command": "debug-start-local-tunnel",
            "args": {
                "ngrokArgs": "http 3978 --log=stdout --log-format=logfmt",
                "env": "local",
                "output": {
                    // output to .env.local
                    "endpoint": "BOT_ENDPOINT", // output tunnel endpoint as BOT_ENDPOINT
                    "domain": "BOT_DOMAIN" // output tunnel domain as BOT_DOMAIN
                }
            },
            "isBackground": true,
            "problemMatcher": "$teamsfx-local-tunnel-watch"
        },
        {
            // Create the debug resources.
            // See https://aka.ms/teamsfx-provision-task to know the details and how to customize the args.
            "label": "Create resources",
            "type": "teamsfx",
            "command": "provision",
            "args": {
                "template": "${workspaceFolder}/teamsfx/app.local.yml",
                "env": "local"
            }
        },
        {
            // Install tools and Build project.
            // See https://aka.ms/teamsfx-deploy-task to know the details and how to customize the args.
            "label": "Install tools and Build project",
            "type": "teamsfx",
            "command": "deploy",
            "args": {
                "template": "${workspaceFolder}/teamsfx/app.local.yml",
                "env": "local"
            }
        },
        {
            "label": "Start services",
            "dependsOn": [
                "Start bot"
            ]
        },
        {
            "label": "Start bot",
            "type": "shell",
            "command": "node teamsfx/script/run.js . teamsfx/.env.local",
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": {
                "pattern": [
                    {
                        "regexp": "^.*$",
                        "file": 0,
                        "location": 1,
                        "message": 2
                    }
                ],
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "[nodemon] starting",
                    "endsPattern": "restify listening to|Bot/ME service listening at|[nodemon] app crashed|Server listening on"
                }
            }
        }
    ]
}